/*
테트리스 블럭을 하나 놓고, 그 칸의 합들을 구할 때,
그 합의 최대값을 구하는 문제
*/

/*
풀이 :
2초 시간제한 -> 2억번까지 가능할듯?
맵이 최대 세로:500 * 가로:500 -> 25만
블럭 19종류 * 4칸 순회 -> 대충 80번
-> 최대 20,000,000번 순회하므로 브루트 포스로 가능 
*/

#include <iostream>

using namespace std;

int n, m;
int map[501][501];

// 19개 블록에 대해 y,x 좌표를 저장
// 회전 및 대칭에 대해 중복은 제거
int tetrominon[19][4][2] = { 
	// 막대(2개)
	{{0,0}, {0,1}, {0,2}, {0,3}},
	{{0,0}, {1,0}, {2,0}, {3,0}},
	// 네모
	{{0,0}, {0,1}, {1,0}, {1,1}},
	// L
	{{0,0}, {1,0}, {1,1}, {1,2}},
	{{0,0}, {0,1}, {1,0}, {2,0}},
	{{0,0}, {0,1}, {0,2}, {1,2}},
	{{0,0}, {1,0}, {2,0}, {2,-1}},
	{{0,0}, {0,1}, {0,2}, {-1,2}},
	{{0,0}, {1,0}, {2,0}, {2,1}},
	{{0,0}, {0,1}, {0,2}, {1,0}},
	{{0,0}, {0,1}, {1,1}, {2,1}},
	// Z
	{{0,0}, {0,1}, {-1,1}, {-1,2}},
	{{0,0}, {1,0}, {1,1}, {2,1}},
	{{0,0}, {0,1}, {1,1}, {1,2}},
	{{0,0}, {1,0}, {1,-1}, {2,-1}},
	// T
	{{0,0}, {0,1}, {0,2}, {-1,1}},
	{{0,0}, {0,1}, {0,2}, {1,1}},
	{{0,0}, {1,0}, {2,0}, {1,1}},
	{{0,0}, {1,0}, {2,0}, {1,-1}},
};


void Input() {
	cin >> n >> m;
	for (int y = 0; y < n; y++) {
		for (int x = 0; x < m; x++) {
			cin >> map[y][x];
		}
	}

}

int main() {
	// freopen_s(new FILE*, "test.txt", "r", stdin);
	Input();

	// 값 찾기
	int max_value = 0;
	
	for (int y = 0; y < n; y++) {
		for (int x = 0; x < m; x++) {
			// 블럭 19개에 대해 확인
			for (int i = 0; i < 19; i++) {
				int sum = 0; 
				for (int j = 0; j < 4; j++) { // 블럭은 4칸
					int dy = y + tetrominon[i][j][0];
					int dx = x + tetrominon[i][j][1];

					if (dy < 0 || dx < 0 || dy >= n || dx >= m) continue; // 하나라도 밖으로 튀어나가면 정지

					sum += map[dy][dx];
				}
				if (sum > max_value) {
					max_value = sum;
				}
			}

		}
	}
	cout << max_value;

	return 0;
}